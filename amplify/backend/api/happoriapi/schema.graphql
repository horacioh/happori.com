input SubmitContactInput {
  name: String!
  email: AWSEmail!
  comment: String
}

input CartItem {
  currency: Currency
  description: String
  formattedValue: String
  id: String!
  name: String
  price: Float!
  quantity: Int
  sku: String!
  slug: String
  value: Float
}

enum Currency {
  EUR
}

type Product
  @model
  @key(
    name: "byText"
    fields: ["name", "description"]
    queryField: "productByText"
  )
  @auth(
    rules: [
      { allow: owner }
      { allow: private, operations: [read] }
      { allow: public, operations: [read] }
    ]
  ) {
  id: ID!
  name: String!
  description: String
  sku: String
  price: Float!
  image: String
  currency: Currency
  collections: [ProductCollection]
    @connection(keyName: "byProduct", fields: ["id"])
}

type ProductCollection
  @model(queries: null)
  @key(name: "byCollection", fields: ["collectionID", "productID"])
  @key(name: "byProduct", fields: ["productID", "collectionID"])
  @auth(
    rules: [
      { allow: owner }
      { allow: private, operations: [read] }
      { allow: public, operations: [read] }
    ]
  ) {
  id: ID!
  productID: ID!
  collectionID: ID!
  product: Product! @connection(fields: ["productID"])
  collection: Collection! @connection(fields: ["collectionID"])
}

type Collection
  @model
  @key(name: "byName", fields: ["name"], queryField: "collectionByName")
  @auth(
    rules: [
      { allow: owner }
      { allow: private, operations: [read] }
      { allow: public, operations: [read] }
    ]
  ) {
  id: ID!
  name: String!
  description: String
  products: [ProductCollection]
    @connection(keyName: "byCollection", fields: ["id"])
}

type Mutation {
  submitContact(input: SubmitContactInput): AWSJSON
    @function(name: "contactform-${env}")

  checkout(input: [CartItem]): AWSJSON @function(name: "checkout-${env}")
}
